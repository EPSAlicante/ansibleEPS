---
# The source code packaged with this file is Free Software, Copyright (C) 2016 by
# Unidad de Laboratorios, Escuela Politecnica Superior, Universidad de Alicante :: <aeps at eps.ua.es>.
# It's licensed under the AFFERO GENERAL PUBLIC LICENSE unless stated otherwise.
# You can get copies of the licenses here: http://www.affero.org/oagpl.html
# AFFERO GENERAL PUBLIC LICENSE is also included in the file called "LICENSE".


# Sudo configuration

- name: Get python version
  shell: echo {{ ansible_python_version }}|cut -d' ' -f2|cut -d'.' -f1,2
  register: pythonVersion
  changed_when: False

- name: Be sure sudo is installed (yum)
  yum: pkg=sudo state=installed
  when: ansible_pkg_mgr == "yum"

- name: Be sure sudo is installed (apt for python >= 2.6)
  apt: pkg=sudo state=installed force=yes
  when: ansible_pkg_mgr == "apt" and pythonVersion.stdout|float >= 2.6

- name: Be sure sudo is installed (Debian and python < 2.6)
  shell: ((apt-cache pkgnames|grep "^sudo$") >/dev/null && echo "No") || ((apt-get -y --force-yes install sudo) && echo "Changed") executable="/bin/bash"
  register: installDebian
  changed_when: installDebian.stdout == "Changed"
  when: ansible_pkg_mgr == "apt" and pythonVersion.stdout|float < 2.6

- name: Configure /etc/pam.d/sudo (Debian) 
  copy: src=etc/pam.d/sudo dest=/etc/pam.d/sudo owner=root group=root mode=0644
  when: ansible_os_family == "Debian"

- name: Copy sudoers file to servers in /etc/.sudoers.check 
  template: src=etc/sudoers.j2 dest=/etc/.sudoers.check owner=root group=root mode=0440
  register: checkFile

- name: Execute /usr/sbin/visudo -cf /etc/.sudoers.check to check syntax 
  shell: /usr/sbin/visudo -cf /etc/.sudoers.check
  register: checkResult
  ignore_errors: True
  when: checkFile|changed

- name: If execution OK -> Copy sudoers file to servers
  template: src=etc/sudoers.j2 dest=/etc/sudoers owner=root group=root mode=0440
  when: checkFile|changed and checkResult|success

- name: If execution fails -> move .sudoers.check as .sudoers.error 
  shell: mv -f /etc/.sudoers.check /etc/.sudoers.error 
  when: checkFile|changed and checkResult|failed

- name: Getting Paths
  action: path_EPS
  changed_when: False
  ignore_errors: yes
  when: path.daemons.sudo.name|default("") == ""

#- name: Restart sudo systemd
#  systemd: name={{ path.daemons.sudo.name }} state=restarted
#  when: path.daemons.sudo.type == "systemctl" and path.daemons.sudo.name|default("") != "" and checkFile|changed and checkResult|success

- name: Restart sudo service
  service: name={{ path.daemons.sudo.name }} state=restarted
  when: path.daemons.sudo.type == "service" and path.daemons.sudo.name|default("") != "" and checkFile|changed and checkResult|success

- name: Restart sudo init
  shell: '{{ path.daemons.sudo.name }} restart executable="/bin/bash"'
  when: path.daemons.sudo.type == "init" and path.daemons.sudo.name|default("") != "" and checkFile|changed and checkResult|success

#- name: Checking sudo systemd
#  systemd: name={{ path.daemons.sudo.name }} state=started enabled=true
#  changed_when: False
#  when: path.daemons.sudo.type == "systemctl" and path.daemons.sudo.name != ""

- name: Checking sudo service
  service: name={{ path.daemons.sudo.name }} state=started enabled=true
  changed_when: False
  when: path.daemons.sudo.type == "service" and path.daemons.sudo.name != ""

- name: Checking sudo init
  shell: "{{ path.daemons.sudo.name }} start; ([ \"{{ ansible_os_family }}\" == \"Debian\" ] && update-rc.d $(basename {{ path.daemons.sudo.name }}) defaults) || ([ \"{{ ansible_os_family }}\" == \"RedHat\" ] && chkconfig $(basename {{ path.daemons.sudo.name }}) on) executable='/bin/bash'"
  changed_when: False
  when: path.daemons.sudo.type == "init" and path.daemons.sudo.name != ""

