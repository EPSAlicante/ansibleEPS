{# The source code packaged with this file is Free Software, Copyright (C) 2016 by #}
{# Unidad de Laboratorios, Escuela Politecnica Superior, Universidad de Alicante :: <aeps at eps.ua.es>. #}
{# It's licensed under the AFFERO GENERAL PUBLIC LICENSE unless stated otherwise. #}
{# You can get copies of the licenses here: http://www.affero.org/oagpl.html #}
{# AFFERO GENERAL PUBLIC LICENSE is also included in the file called "LICENSE". #}
{#                                                                              #}
{#                                                                              #}
#!/bin/bash
 ###############################################################################################
 ##### rsyncLocal: Script to synchronize virtual machines & containers in a secondary disk #####
 ##### version: 2.0                                                                        #####
 ###############################################################################################
 ##### It synchronizes production directory and backup directory no stopping virtual       #####
 ##### machines and containers, using LVM snapshots.                                       #####
 ##### Once LVM snapshot done, it sinchronnizes directory with rsync command.              #####
 ###############################################################################################


 ### SIGNALS ###
 # Trapping signals 
 senales="SIGINT SIGTERM"
 trap 'fin'  $senales


 ### VARIABLES ###
 # Global variables declaration 
 fechaInicio="`date +%Y-%m-%d`"
 horaInicio="`date +%H:%M:%S`"
 fileLog="/var/log/rsync/rsyncLocal-$fechaInicio-$horaInicio.log"
 errorLog="/var/log/rsync/error.log"
 particionBackup="{{ backupDisk }}"
 nombreSnapshot="foto"
 lvmOpt="/dev/pve/data"
 lvmSnapshot="/dev/pve/$nombreSnapshot"
 mountSnapshot="/foto"
 mountBackup="/backup"
 dirLocal="/var/lib/vz"
 dirNFS="/mnt/pve"
 dirNFSGeneral="$dirNFS/VM"
 dirGlusterFS="/mnt/pve"
 dirGlusterFSGeneral="$dirGlusterFS/gVM"
 dirBackup="$mountBackup/rsync"
 dirMaquinasVZ="$mountSnapshot/private"
 dirMaquinasKVM="$mountSnapshot/images"
 dirLocalMaquinasVZ="$dirLocal/private"
 dirLocalMaquinasKVM="$dirLocal/images"
 listaMquinasVZ=""
 listMaquinasKVM=""
 dirConfVZ="/etc/pve/openvz"
 dirConfKVM="/etc/pve/qemu-server"
 excludeFile="exclude"
 domain="{{ domain }}"
 #user="rsync"


 ### FUNTIONS ###
 # Functions declaration 
 # Function to show help on screen
 function ayuda() {
   echo ""
   echo " Use: rsyncLocal.sh OPTION [maquina1]...[maquinaN]"
   echo ""
   echo "  OPTION: "
   echo ""
   echo "   todos -> sinchronize all machines, running or stopped."
   echo ""
   echo "   produccion -> sinchronize only running machines."
   echo ""
   echo "   lista -> sinchronize a list of machines. List will be defined after 'lista' option, with whitespaces"
   echo ""
 }

 # Function to trap signals and finish script in a proper way
 function fin() {
   # The most important thing is to unmount and delete snapshot if it has been created
   echo "" >> $fileLog
   echo "Script stopped, ending function..." >> $fileLog
   echo "" >> $fileLog

   if [ -e $lvmSnapshot ]; then
     cadenaMountSnapshot=" on $mountSnapshot type ext3"
     if [[ `/bin/mount | grep "$cadenaMountSnapshot"` ]]; then
       echo "" >> $fileLog
       echo "Desmontando $mountSnapshot" >> $fileLog
       echo "" >> $fileLog
       /bin/umount $mountSnapshot >> $fileLog 2>> $fileLog
     fi
     /sbin/lvremove -f $lvmSnapshot >> $fileLog 2>> $fileLog
   fi
   exit
 }


 ### ARGUMENTS ###
 # Checking number of arguments
 if [ $# -lt 1 ]; then
   ayuda
   exit 1
 fi

 # Get type of backup (argument)
 case $1 in
   todos|produccion|lista)
          opcion=$1
          shift
          ;;
   *)
          ayuda
          exit 1
          ;;
 esac


 echo "### Local Sinchronization ($fechaInicio $horaInicio) in $HOSTNAME ###" > $fileLog

 echo "" >> $fileLog
 echo "--- Machines list to sinchronize. Option -> $opcion ----" >> $fileLog
 echo "" >> $fileLog

 ### MACHINES LIST ###
 # Get machines list to sinchronize, depending on option selected
 case $opcion in
     todos)
	# Get all machines ('conf' files) 
        dirOld=$PWD
        if [[ `/usr/bin/find "$dirConfVZ/" -name "*.conf"|/usr/bin/wc -l` -gt 0 ]]; then
          cd $dirConfVZ
          for maquina in *.conf
          do
            maqID=${maquina%.conf}
	    # Get machine name
            nombreID=`/usr/sbin/vzlist -H -o hostname $maqID | /bin/sed "s/\.$domain//g"`
            nombreID="${nombreID:-unknown}-$maqID"

	    # Get disk path (VE_PRIVATE in conf file)
            pathMaquina=`/bin/grep "^VE_PRIVATE" $maquina | /usr/bin/cut -d'=' -f2 | /bin/sed "s/\"//g"`

	    # Check if disk exists
            if [ -d "$pathMaquina" ]; then
	 	# Copying conf files in machine root directory
                echo "Copying ${maqID}.* ($nombreID) conf files to $pathMaquina/root" >> $fileLog
                /bin/cp "$dirConfVZ/${maqID}".* "$pathMaquina/root"
                erroresCP=$?
                if [[ $erroresCP -gt 0 ]]; then
                    echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfVZ/${maqID}.* $pathMaquina/root/ " >> $fileLog
                    echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfVZ/${maqID}.* $pathMaquina/root/ " >> $errorLog
                fi
                echo "" >> $fileLog
		
		# Machine added to backup list if local disk (non NFS) 
                if [[ `echo "$pathMaquina" | /bin/grep "$dirLocal"` ]]; then
                    listaMaquinasVZ="$listaMaquinasVZ $nombreID"
                fi
            else
		# Disk doesn't exist
                echo "$nombreID machine with no disk directory ($pathMaquina not found). Ignored" >> $fileLog
                echo "" >> $fileLog
            fi
          done
        fi
        if [[ `/usr/bin/find "$dirConfKVM/" -name "*.conf"|/usr/bin/wc -l` -gt 0 ]]; then
          cd $dirConfKVM
          for maquina in *.conf
          do
            maqID=${maquina%.conf}
	    # Get machine name
            nombreID=`/usr/sbin/qm list | /bin/grep -v "VMID NAME" | /bin/grep "$maqID" | /usr/bin/cut -b 12-32 | /bin/sed "s/ //g" | /bin/sed "s/\.$domain//g"`
            nombreID="${nombreID:-unknown}-$maqID"

	    # Get disk path
            tipoPath=`/bin/grep "$maqID" $maquina | /usr/bin/head -1 | /usr/bin/cut -d':' -f2 | /bin/sed "s/ //g"`
            if [ "$tipoPath" = "local" ]; then
		# Local disk
                pathMaquina="$dirLocalMaquinasKVM/$maqID"
	    elif [ "$tipoPath" = "gVM" ]; then
		# GlusterFS disk
		pathMaquina="$dirGlusterFSGeneral/images/$maqID"
            elif [ "$tipoPath" = "VM" ]; then
                # NFS disk
                pathMaquina="$dirNFSGeneral/images/$maqID"
	    else
		pathMaquina=""
		echo "Error: Path not detected to copy conf files for $maqID ($nombreID)" >> $fileLog
		echo "Error: Path not detected to copy conf files for $maqID ($nombreID)" >> $errorLog
		echo "" >> $fileLog
            fi

            if [ -d "$pathMaquina" ]; then
		# Copying conf files to disk directory
                echo "Copying ${maqID}.* ($nombreID) conf files to $pathMaquina" >> $fileLog
                /bin/cp "$dirConfKVM/${maqID}".* "$pathMaquina"
                erroresCP=$?
                if [[ $erroresCP -gt 0 ]]; then
                    echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfKVM/${maqID}.* $pathMaquina/ " >> $fileLog
                    echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfKVM/${maqID}.* $pathMaquina/ " >> $errorLog
                fi
                echo "" >> $fileLog

		# Machine added to backup list if local disk (non NFS)
                if [ "$tipoPath" = "local" ]; then
                    listaMaquinasKVM="$listaMaquinasKVM $nombreID"
                fi
            fi
          done
        fi
        cd $dirOld
        ;;

     produccion)
	# Get all machines (conf files)
        dirOld=$PWD
        if [[ `/usr/bin/find "$dirConfVZ/" -name "*.conf"|/usr/bin/wc -l` -gt 0 ]]; then
          cd $dirConfVZ
          for maquina in *.conf
          do

            maqID=${maquina%.conf}
	    # Get machine name
            nombreID=`/usr/sbin/vzlist -H -o hostname $maqID | /bin/sed "s/\.$domain//g"`
            nombreID="${nombreID:-unknown}-$maqID"

	    # Checking if machine is running
            if [[ `/usr/sbin/vzlist -H -o status $maqID | /bin/grep "running"` ]]; then

		# Get disk path
                pathMaquina=`/bin/grep "^VE_PRIVATE" $maquina | /usr/bin/cut -d'=' -f2 | /bin/sed "s/\"//g"`

		# Checking if disk path exists
                if [ -d "$pathMaquina" ]; then
		    # Copying conf files to machine root directory
		    echo "Copying ${maqID}.* ($nombreID) conf files to $pathMaquina/root" >> $fileLog
                    /bin/cp "$dirConfVZ/${maqID}".* "$pathMaquina/root"
                    erroresCP=$?
                    if [[ $erroresCP -gt 0 ]]; then
                        echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfVZ/${maqID}.* $pathMaquina/root/ " >> $fileLog
                        echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfVZ/${maqID}.* $pathMaquina/root/ " >> $errorLog
                    fi
                    echo "" >> $fileLog

		    # Machine added to backup list if local disk (non NFS)
                    if [[ `echo "$pathMaquina" | /bin/grep "$dirLocal"` ]]; then
                        listaMaquinasVZ="$listaMaquinasVZ $nombreID"
                    fi
                else
		    # Disk doesn't exist
                    echo "$nombreID machine with no disk directory ($pathMaquina not found). Ignored" >> $fileLog
                    echo "" >> $fileLog
                fi
            fi
          done
        fi
        if [[ `/usr/bin/find "$dirConfKVM/" -name "*.conf"|/usr/bin/wc -l` -gt 0 ]]; then
          cd $dirConfKVM
          for maquina in *.conf
          do
            maqID=${maquina%.conf}
	    # Get machine name
            nombreID=`/usr/sbin/qm list | /bin/grep -v "VMID NAME" | /bin/grep "$maqID" | /usr/bin/cut -b 12-32 | /bin/sed "s/ //g" | /bin/sed "s/\.$domain//g"`
            nombreID="${nombreID:-unknown}-$maqID"

	    # Cheking if machine is running
            if [[ `/usr/sbin/qm list | /bin/grep -v "VMID NAME" | /bin/grep " $maqID " | /bin/grep " running "` ]]; then
		# Get disk path
                tipoPath=`/bin/grep "$maqID" $maquina | /usr/bin/head -1 | /usr/bin/cut -d':' -f2 | /bin/sed "s/ //g"`
                if [ "$tipoPath" = "local" ]; then
		    # Local disk
                    pathMaquina="$dirLocalMaquinasKVM/$maqID"
            	elif [ "$tipoPath" = "gVM" ]; then
                    # GlusterFS disk
                    pathMaquina="$dirGlusterFSGeneral/images/$maqID"
            	elif [ "$tipoPath" = "VM" ]; then
                    # NFS disk
                    pathMaquina="$dirNFSGeneral/images/$maqID"
            	else
                    pathMaquina=""
                    echo "Error: Path not detected to copy conf files for $maqID ($nombreID)" >> $fileLog
                    echo "Error: Path not detected to copy conf files for $maqID ($nombreID)" >> $errorLog
                    echo "" >> $fileLog
            	fi

                if [ -d "$pathMaquina" ]; then
		    # Copying conf files to machine root directory
		    echo "Copying ${maqID}.* ($nombreID) conf files to $pathMaquina" >> $fileLog
                    /bin/cp "$dirConfKVM/${maqID}".* "$pathMaquina"
                    erroresCP=$?
                    if [[ $erroresCP -gt 0 ]]; then
                        echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfKVM/${maqID}.* $pathMaquina/ " >> $fileLog
                        echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfKVM/${maqID}.* $pathMaquina/ " >> $errorLog
                    fi
                    echo "" >> $fileLog

		    # Machine added to backup list if local disk (non NFS)
                    if [ "$tipoPath" = "local" ]; then
                        listaMaquinasKVM="$listaMaquinasKVM $nombreID"
                    fi
                fi
            fi
          done
        fi
        cd $dirOld
        ;;

     lista)
	# Get machine list from arguments
        while (( $# ))
        do
            maqID=""
	    # Checking if it's a VZ machine
            if [[ `/usr/sbin/vzlist -aH -o ctid,hostname | /bin/grep -i " $1.$domain" | /usr/bin/cut -b 1-11 | /bin/sed "s/ //g"` ]]; then
                maqID=`/usr/sbin/vzlist -aH -o ctid,hostname | /bin/grep -i " $1.$domain" | /usr/bin/cut -b 1-11 | /bin/sed "s/ //g"`
                nombreID=`/usr/sbin/vzlist -H -o hostname $maqID | /bin/sed "s/\.$domain//g"`
                nombreID="${nombreID:-$1}-$maqID"

		# Get path disk
                pathMaquina=`/bin/grep "^VE_PRIVATE" "$dirConfVZ/$maqID.conf" | /usr/bin/cut -d'=' -f2 | /bin/sed "s/\"//g"`

		# Checking if disk path exists 
                if [ -d "$pathMaquina" ]; then
		    # Copying conf files to machine root directory
		    echo "Copying ${maqID}.* ($nombreID) conf files to $pathMaquina/root" >> $fileLog
                    /bin/cp "$dirConfVZ/${maqID}".* "$pathMaquina/root"
                    erroresCP=$?
                    if [[ $erroresCP -gt 0 ]]; then
                        echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfVZ/${maqID}.* $pathMaquina/root/ " >> $fileLog
                        echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfVZ/${maqID}.* $pathMaquina/root/ " >> $errorLog
                    fi
                    echo "" >> $fileLog

		    # Machine added to backup list if local disk (non NFS)
                    if [[ `echo "$pathMaquina" | /bin/grep "$dirLocal"` ]]; then
                        listaMaquinasVZ="$listaMaquinasVZ $nombreID"
                    fi
                else
                    echo "$nombreID machine (from 'lista' option) with no directory (not found). Ignored" >> $fileLog
                    echo "" >> $fileLog
                fi
            fi
            # Checking if it's a KVM machine
            if [[ `/usr/sbin/qm list | /bin/grep -v "VMID NAME" | /bin/grep -i " $1 " | /usr/bin/cut -b 1-11 | /bin/sed "s/ //g"` ]]; then
                maqID=`/usr/sbin/qm list | /bin/grep -v "VMID NAME" | /bin/grep -i " $1 " | /usr/bin/cut -b 1-11 | /bin/sed "s/ //g"`
                nombreID=`/usr/sbin/qm list | /bin/grep -v "VMID NAME" | /bin/grep "$maqID" | /usr/bin/cut -b 12-32 | /bin/sed "s/ //g" | /bin/sed "s/\.$domain//g"`
                nombreID="${nombreID:-$1}-$maqID"

		# Get path disk
                tipoPath=`/bin/grep "$maqID" "$dirConfKVM/$maqID.conf" | /usr/bin/head -1 | /usr/bin/cut -d':' -f2 | /bin/sed "s/ //g"`
                if [ "$tipoPath" = "local" ]; then
		    # Local disk
                    pathMaquina="$dirLocalMaquinasKVM/$maqID"
	        elif [ "$tipoPath" = "gVM" ]; then
               	    # GlusterFS disk
                    pathMaquina="$dirGlusterFSGeneral/images/$maqID"
            	elif [ "$tipoPath" = "VM" ]; then
                    # NFS disk
                    pathMaquina="$dirNFSGeneral/images/$maqID"
            	else
                    pathMaquina=""
                    echo "Error: Path not detected to copy conf files for $maqID ($nombreID)" >> $fileLog
                    echo "Error: Path not detected to copy conf files for $maqID ($nombreID)" >> $errorLog
                    echo "" >> $fileLog
            	fi

                if [ -d "$pathMaquina" ]; then
		    # Copying conf files to disk directory 
		    echo "Copying ${maqID}.* ($nombreID) conf files to $pathMaquina" >> $fileLog
                    /bin/cp "$dirConfKVM/${maqID}".* "$pathMaquina"
                    erroresCP=$?
                    if [[ $erroresCP -gt 0 ]]; then
                        echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfKVM/${maqID}.* $pathMaquina/ " >> $fileLog
                        echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfKVM/${maqID}.* $pathMaquina/ " >> $errorLog
                    fi
                    echo "" >> $fileLog

		    # Machine added to backup list if local disk (non NFS)
                    if [ "$tipoPath" = "local" ]; then
                        listaMaquinasKVM="$listaMaquinasKVM $nombreID"
                    fi
                else
                    echo "$nombreID machine (from 'lista' option) with no directory (not found). Ignored" >> $fileLog
                    echo "" >> $fileLog
                fi
            fi
            if [ -z "$maqID" ]; then
                echo "$1 machine (from 'lista' option) not found. Ignored" >> $fileLog
                echo "" >> $fileLog
            fi
          shift
        done
        ;;
 esac


 ### SNAPSHOT ###
 cadenaMountBackup="$particionBackup on $mountBackup type xfs"
 # if mount shows cadenaMount string then backup partition 
 # is mounted and we can start sinchronization
 # We have to check if backup list is not empty, too
 if [[ `/bin/mount | grep "$cadenaMountBackup"` ]] && [[ -n "$listaMaquinasVZ$listaMaquinasKVM" ]]; then

   # start LVM snapshot y mount partition to access production data
   /sbin/lvcreate -L{{ snapshotSpace }} -s -n $nombreSnapshot $lvmOpt >> $fileLog 2>> $fileLog
   erroresLvcreate=$?
   if [[ $erroresLvcreate -gt 0 ]]; then
        echo "Error ($erroresLvcreate) running Lvcreate" >> $fileLog
        echo "Error ($erroresLvcreate) running Lvcreate" >> $errorLog
        fin
   fi
   /bin/mount -t ext3 -o ro $lvmSnapshot $mountSnapshot >> $fileLog 2>> $fileLog
   erroresMount=$?
   if [[ $erroresMount -gt 0 ]]; then
        echo "Error ($erroresMount) runnnig snapshot mount" >> $fileLog
        echo "Error ($erroresMount) running snapshot mount" >> $errorLog
        fin
   fi

   echo "" >> $fileLog
   echo "--- Backup started on $fechaInicio at $horaInicio ----" >> $fileLog
   echo "" >> $fileLog


   ### VZ RSYNC ###
   # Let's start sinchronization for machines list (if it's not empty)
   # First we sinchronize VZ machines
   if [ -n "$listaMaquinasVZ" ]; then
      echo "" >> $fileLog
      echo "* VZ machines to sinchronize: $listaMaquinasVZ" >> $fileLog
      for nombreID in $listaMaquinasVZ
      do
        horaLog="`date +%H:%M:%S`"
	cow="`lvdisplay|grep 'Allocated'|tr -s ' '|cut -d' ' -f5`"
        maqID=`echo $nombreID|/usr/bin/cut -d'-' -f2`
	# Looking for exclude file in VZ root directory
        if [ -r "$dirMaquinasVZ/$maqID/$excludeFile" ]; then
          excludeFrom=" --exclude-from=$dirMaquinasVZ/$maqID/$excludeFile "
        else
          excludeFrom=""
        fi
        echo "" >> $fileLog
        echo "* * [$horaLog] [$cow] Sinchronizing $nombreID (VZ)..." >> $fileLog
	# If destination directory doesn't exist then it has to be created
        if ! [[ -d "$dirBackup/$nombreID/$maqID" ]]; then
            echo "Creating $dirBackup/$nombreID/$maqID directory ..." >> $fileLog
            /bin/mkdir -p "$dirBackup/$nombreID/$maqID"
            erroresMkdir=$?
            if [[ $erroresMkdir -gt 0 ]]; then
               echo "Error $erroresMkdir on mkdir: /bin/mkdir -p $dirBackup/$nombreID/$maqID" >> $fileLog
               echo "Error $erroresMkdir on mkdir: /bin/mkdir -p $dirBackup/$nombreID/$maqID" >> $errorLog
	       # Skipping sinchronization, next machine
               continue
            fi
        fi
	# Copying conf files to directory
        echo "Copying ${maqID}.* conf files" >> $fileLog
        /bin/cp "$dirConfVZ/${maqID}".* "$dirBackup/$nombreID/"
        erroresCP=$?
        echo "" >> $fileLog
        if [[ $erroresCP -gt 0 ]]; then
          echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfVZ/${maqID}.* $dirBackup/$nombreID/ " >> $fileLog
          echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfVZ/${maqID}.* $dirBackup/$nombreID/ " >> $errorLog
        fi
        # Starting sinchronization
        rsync --force -arvu --delete --inplace $excludeFrom "$dirMaquinasVZ/$maqID/" "$dirBackup/$nombreID/$maqID" >> $fileLog 2>> $fileLog
        erroresRsync=$?
        echo "" >> $fileLog
        if [[ $erroresRsync -gt 0 ]]; then
          echo "Error $erroresRsync on rsyncLocal: rsync --force -arvu --delete --inplace $excludeFrom $dirMaquinasVZ/$maqID $dirBackup/$nombreID" >> $fileLog
          echo "Error $erroresRsync on rsyncLocal: rsync --force -arvu --delete --inplace $excludeFrom $dirMaquinasVZ/$maqID $dirBackup/$nombreID" >> $errorLog
        fi
        horaLog="`date +%H:%M:%S`"
        echo "[$horaLog] End of sinchronization for $nombreID (VZ)" >> $fileLog
        echo "" >> $fileLog
      done
   fi


   ### KVM RSYNC ###
   # Sinchronization for KVM machines
   if [ -n "$listaMaquinasKVM" ]; then
      echo "" >> $fileLog
      echo "* KVM  machines to sinchronize: $listaMaquinasKVM" >> $fileLog
      for nombreID in $listaMaquinasKVM
      do
        horaLog="`date +%H:%M:%S`"
	cow="`lvdisplay|grep 'Allocated'|tr -s ' '|cut -d' ' -f5`"
        maqID=`echo $nombreID|/usr/bin/cut -d'-' -f2`
        echo "" >> $fileLog
        echo "* * [$horaLog] [$cow] Sinchronizing $nombreID (KVM)..." >> $fileLog
	# If destination directory doesn't exist then it has to be created	
        if ! [[ -d "$dirBackup/$nombreID/$maqID" ]]; then
            echo "Creating $dirBackup/$nombreID/$maqID directory ..." >> $fileLog
            /bin/mkdir -p "$dirBackup/$nombreID/$maqID"
            erroresMkdir=$?
            if [[ $erroresMkdir -gt 0 ]]; then
               echo "Error $erroresMkdir on mkdir: /bin/mkdir -p $dirBackup/$nombreID/$maqID" >> $fileLog
               echo "Error $erroresMkdir on mkdir: /bin/mkdir -p $dirBackup/$nombreID/$maqID" >> $errorLog
	       # Skipping sinchronization, next machine
               continue
            fi
        fi
	# Copying conf file to directory
        echo "Copying ${maqID}.conf conf file" >> $fileLog
        /bin/cp "$dirConfKVM/${maqID}.conf" "$dirBackup/$nombreID/"
        erroresCP=$?
        echo "" >> $fileLog
        if [[ $erroresCP -gt 0 ]]; then
          echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfKVM/${maqID}.conf $dirBackup/$nombreID/ " >> $fileLo
g
          echo "Error $erroresCP on rsyncLocal: /bin/cp $dirConfKVM/${maqID}.conf $dirBackup/$nombreID/ " >> $errorLog
        fi
        # Starting sinchronization
        rsync --force -arvu --delete --inplace "$dirMaquinasKVM/$maqID/" "$dirBackup/$nombreID/$maqID" >> $fileLog 2>> $fileLog
        erroresRsync=$?
        echo "" >> $fileLog
        if [[ $erroresRsync -gt 0 ]]; then
          echo "Error $erroresRsync on rsyncLocal: rsync --force -arvu --delete --inplace $dirMaquinasKVM/$maqID $dirBackup
/$nombreID" >> $fileLog
          echo "Error $erroresRsync on rsyncLocal: rsync --force -arvu --delete --inplace $dirMaquinasKVM/$maqID $dirBackup
/$nombreID" >> $errorLog
        fi
        horaLog="`date +%H:%M:%S`"
        echo "[$horaLog] End of sinchronization for $nombreID (KVM)" >> $fileLog
        echo "" >> $fileLog
      done
   fi
   # If there are no machines to sinchronize, show on log file
   if [ -z "$listaMaquinasVZ" ] && [ -z "$listaMaquinasKVM" ]; then
     echo "" >> $fileLog
     echo "No machines to sinchronize" >> $fileLog
     echo "" >> $fileLog
   fi


   ### SNAPSHOT ###
   # Unmont and delete snapshot
   echo "" >> $fileLog
   echo "--- LVM snapshot state before unmounting ---" >> $fileLog
   echo "" >> $fileLog
   /sbin/lvdisplay $lvmSnapshot >> $fileLog 2>> $fileLog
   /bin/umount $mountSnapshot >> $fileLog 2>> $fileLog
   /sbin/lvremove -f $lvmSnapshot >> $fileLog 2>> $fileLog

   fechaFin="`date +%Y-%m-%d`"
   horaFin="`date +%H:%M:%S`"
   echo "" >> $fileLog
   echo "--- Sinchronization finished on $fechaFin at $horaFin ---" >> $fileLog

 else
   if ! [[ `/bin/mount | grep "$cadenaMountBackup"` ]]; then
      echo "$particionBackup partition not mounted on $mountBackup" >> $fileLog
      echo "$particionBackup partition not mounted on $mountBackup" >> $errorLog
   else
     echo "" >> $fileLog
     echo "No machines to sinchronize" >> $fileLog
     echo "" >> $fileLog
   fi
 fi

 # Sending email 
 #/bin/cat $fileLog | mail admin@$domain -s "Results of local rsync in $HOSTNAME on $fechaInicio at $horaInicio"


